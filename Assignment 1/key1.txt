Exercise 1.1: c u r l SP *right click to paste:
http://web.cs.ucla.edu/classes/fall17/cs35L/assign/assign1.html*

*copy and past into assign1.txt*

c p SP a s s i g n 1 . h t m l SP e x e r 1 . h t m l c p SP a s s i g n 1 . h t
m l SP e x e r 2 . h t m l c p SP a s s i g n 1 . h t m l SP e x e r 3 . h t m l

1. M-s w P U B L I C Enter

2. M-s w L a b o r a t o r y Enter C-M-b

3. M-s w s e l f - r e f e r e n t i a l Enter C-M-b

4. M-s w a r r o w Enter C-M-b

6. C-e

7. C-a

8. I did not use the arrow keys, I used emacs commands. The ones I used were:

M-s w (word search)

C-M-b (moves cursor to beginning of word)

C-e (moves to end of line)

C-a (moves to beginning of line)

9. n/a

10. C-z

Exercise 1.2: 1. n/a 2. M-g M-g 1 8 Enter C-SP C-e Backspace 3. M-s w D E L E T
E M E Enter C-a C-SP C-e Backspace 4. C-s w w i k i C-s C-s C-a up-arrow C-SP
C-e down-arrow C-e down-arrow Backspace 5. C-s < ! C-a C-SP right-arrow
right-arrow right-arrow right-arrow right-arrow right-arrow right-arrow
Backspace

C-s < ! C-a C-SP C-e Backspace

Exercise 1.3: 2. C-s A s s i g n m e n t 1 Backspace 3 7 C-s A s s i g n m e n t
1 Backspace 3 7 3. C-s U T F - 8 Backspace Backspace Backspace Backspace
Backspace U S - A S C I I 4. C-s </ol> C-a C-SP C-e Backspace

Exercise 1.4: 3.(I had exer2.diff opened in another session of terminal, to
minimize the keystrokes required for this exercise) C-M-e up-arrow up-arrow
Enter C-SP C-e M-w M-g M-g 3 5 2 C-M-e Enter down-arrow down-arrow down-arrow
C-y 4.For editing in "<p>should output only a small number of log
lines<!---->.</p>": (I didn't return to the bottom of the document again -
that's just unnecessary keystrokes) C-s < p > s h o u Enter up-arrow C-SP C-e
M-w up-arrow up-arrow up-arrow up-arrow up-arrow M-g M-g 3 3 5 Enter down-arrow
down-arrow down-arrow down-arrow down-arrow C-SP C-e Backspace C-y

For editing in "<!-- You can learn more about HTML comments at
<https://en.wikipedia.org/wiki/HTML_comment#Comments>. -->": (Again, I didn't
return to the bottom of the document) C-s Y Enter C-a right-arrow C-SP C-e
down-arrow C-e down arrow M-w M-g M-g 3 0 0 Enter down-arrow down-arrow
down-arrow C-y C-a delete up-arrow delete

For editing in "<!-- DELETEME DELETEME DELETEME -->": C-s D E Enter C-a
right-arrow C-SP C-e M-w M-g M-g 9 0 Enter down-arrow down-arrow down-arrow C-y

For editing in the long comment with Chinese characters in it: C-s U N I X Enter
C-a right-arrow C-SP down-arrow down-arrow C-e M-w M-g M-g 1 7 down-arrow C-y

5.C-s - - - SP Enter C-a C-SP C-M-e Backspace

6.C-

7.C-r - - - SP Enter C-SP C-M-e M-;

8. *held down until reached top of document* C-M-a C-SP *held down until bottom
of document* C-M-e M-x r e p l a c e - s t r i n g < o l > Enter < O l > Enter

There were 7 occurrences of <ol>.

Exercise 1.5: 1. m k d i r SP j u n k 2. M-x c o m p i l e Enter h e l l o Enter
3. C-x b h e l l o - o u t p u t Enter C-u M-! . / h e l l o 4. Output: 
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c\
  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n\
, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Exercise 1.6: 1. C-x b * s c r a t c h * Enter 2. ( r a n d o m ) C - j 3. ( s e
t q SP x SP ( r a n d o m ) ) C-j ( s e t q SP y SP ( r a n d o m ) ) C-j 4. ( *
SP x SP y ) C-j The product of the two values should be
-125202947430013966315995058833325920, but instead it is
-1289621543449657184. The product seems to have overflowed.  5. M-: ( * x y )
Enter The output is actually the same, save for two non-numeric values in
parentheses: -1289621543449657184 (#o270322600476777400240, #x2e1a5809f7fe00a0)
The non-numeric values are actually the output value in other formats (octal and
hexadecimal).  6. The two numbers aren't random in the mathematical sense - the
probability of a number randomly occurring should be independent of the number
that preceded it, but the series of numbers produced by the random function
actually rely on a random seed value that is assigned at the first
initialization of the function. If you know the seed value, you can replicate
the series of "random" numbers that is output by the function, making the values
output not-so random anymore. In my math class, we learned of a mathematical
function that the random function might be based on:

Given a multiplier a, such that 2 <= a <= m (m being the assigned modulo value),
an increment value c, such that 1 <= c <= m, and a seed value s, such that 0 <=
s < m, the random value is given by:
     
x = (a*x(prev) + c)mod(m)

a, c, and m are assigned at the initialization of this function, and x(prev) is
initialized to the seed. Since the function relies of the previous value of x,
and since the first value of x is equal to the seed, if you can get the correct
seed s, multiplier a, increment c, and modulo m, you can recreate your string of
pseudo-random numbers.

All that said, these pseudo-random numbers do a great job in mimicking the
properties of true random numbers. Taken from the GNU man page about the random
function:

"For example, all possible values occur equally often in a pseudo-random
series."

This is indeed a characteristic of random values - however, as explained
earlier, these values are not truly random values, in the mathematical sense.

7. The GNU manual states that the minimum range of integers for Emacs is
−536,870,912 to 536,870,911. Assuming that this is the range of integers for my
computer (even though chances are it isn't; these ranges are hardware-based), we
know that any integer that exceeds this range is going to overflow. Therefore,
the probability that any two randomly chosen integers (within the range
−536,870,912 to 536,870,911) will have a product that overflows is:

1. First, view each positive number as (536, 870, 911)/d, d being some
denominator, and each negative number as (-536, 870, 912)/d. For example, 1 is
536, 870, 911/d, d being 536, 870, 911. With this view in mind, it becomes
apparent that a product (536, 870, 911/d) * x will overflow if x exceeds d. Now,
we can calculate the probability of getting two random numbers such that x
exceeds d.

2. For positive numbers, we first calculate the probability of getting some
value d, between 1 and 536, 870, 911. That probability is 1/536, 870, 911.

3. Now, we multiply it against the probability of picking any number between 1
and 536, 870, 911 higher than d. We established the expression:

536870911/d = n, n being a randomly generated number

Therefore, d = 536870911/n.

The probability of picking a number between 1 and 536, 870, 911 is:

(536870911 - (536870911/n))/536870911.

Now, we have an equation that gives us the probability of two numbers
overflowing:

(1/536870911) * ((536870911 - 536870911/n))/536870911

= (1/536870911) * (1 -(1/n))
  
4. The thing about this equation is that it doesn't fully satisfy the original
purpose: to give us the probability that ANY two randomly generated numbers will
cause an overflow. The current equation only gives us the probability of
overflow, given one number n. To find the probability of ANY two random integers
multiplying to a number that overflows, we need to take the sum of this
function, from 1 to 536870911:

(1/536870911) * [the sum, from n = 1 to n = 536870911, of: 1 - (1/n)]

This expression evaluates to 0.9999. This is a pretty rough value/estimate of
course. For example, the number of integers greater than d should be a whole
number, but a lot of times it isn't (i.e. when n = 3, d = 17895670.3, so
536870911 - 17895670.3 = 357913940.7, which isn't a value that really makes
sense in this context; it should probably be 357913940, rounding down). My gut
feeling is that it should be lower, but when you think about it, this value kind
of makes sense. The vast majority of number combinations would result in a
product whose absolute value is greater than 536870911; for example, given the
relatively small number of 100, you just need any number with an absolute value
larger than 536870911/100 = 5368709.11 to result in overflow, and just counting
from the positive side, there are 536870911 - 5368709.11 = 531502201 that can
satisfy this requirement. Double that number and that gives you the chances of
getting either a positive or negative value with an absolute value large enough
to cause the product to overflow. The chances of overflow, while instinctively
they don't seem to be 0.999, after a bit of thought, may actually be very, very
high.


